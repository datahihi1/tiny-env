<?php
namespace Datahihi1\TinyEnv;use Exception;
class TinyEnv{
protected$loaded=false,$rootDirs,$envFiles=['.env'];protected static$cache=[],$fileLinesCache=[];
function __construct($d,$f=false){$this->rootDirs=(array)$d;if($f)$this->L([],1);}
function envfiles(array$f):self{$f=array_values(array_unique($f));if(($i=array_search('.env',$f,true))!==false)unset($f[$i]);array_unshift($f,'.env');$this->envFiles=$f;return$this;}
function load($k=[],$f=false):self{return$this->L($k,$f);}
protected function L($k=[],$f=false):self{if($this->loaded&&!$f)return$this;if($f)self::$fileLinesCache=[];$flt=$k?:null;$fd=false;foreach($this->rootDirs as$d)foreach(array_reverse($this->envFiles)as$x){$p="$d/{$x}";if(is_file($p)&&is_readable($p)){$this->F($p,$flt);$fd=1;}}if(!$fd)throw new \RuntimeException("No .env in [".implode(',',$this->rootDirs)."]");$this->loaded=1;return$this;}
function lazy(array$p):self{$p=array_filter($p);if(!$p)return$this;foreach($this->rootDirs as$d)foreach(array_reverse($this->envFiles)as$x){$f="$d/$x";if(!is_file($f))continue;$ls=$this->R($f,1,1);if($ls===false)continue;foreach($ls as$l){$l=trim($l);if($l===''||$l[0]=='#'||strpos($l,'=')===false)continue;[$k]=explode('=',$l,2);foreach($p as$r)if(stripos($k,$r)===0)try{$this->P($l,null);}catch(Exception$e){} }}return$this;}
function safeLoad($k=[]):self{$flt=$k?:null;foreach($this->rootDirs as$d)foreach(array_reverse($this->envFiles)as$x){$f="$d/$x";if(!is_file($f))continue;$ls=$this->R($f,1,1);if($ls===false)continue;foreach($ls as$l)try{$this->P($l,$flt);}catch(Exception$e){}}return$this;}
private function P($l,?array$a=null,?array$r=null){$l=trim($l);if($l===''||$l[0]=='#')return;$eq=strpos($l,'=');if($eq===false)throw new Exception("Bad:$l");$k=trim(substr($l,0,$eq));$v=ltrim(substr($l,$eq+1));$v=self::S($v);if($k===''||!preg_match('/^[A-Z_][A-Z0-9_]*$/i',$k))throw new Exception("Key:$l");if($a&&!in_array($k,$a,true))return;$v=trim($v," \t\n\r\0\x0B\"");$vis=[];$rc=function($m)use(&$vis,$r,&$rc){$v=$m[1]??'';$op=$m[2]??'';$arg=$m[3]??'';if(in_array($v,$vis,true))throw new Exception("Rec:$v");$vis[]=$v;$env=TinyEnv::$cache[$v]??($_ENV[$v]??null);if($env===null&&is_array($r)&&isset($r[$v])){$x=$r[$v];$env=(strpos($x,'${')!==false)?preg_replace_callback('/\${?([A-Z0-9_]+)(:?[-?])?([^}]*)}?/i',$rc,$x):$x;}switch($op){case':-':$res=($env===null||$env==='')?$arg:$env;break;case'-':$res=$env===null?$arg:$env;break;case'?':if($env===null||$env==='')throw new Exception("Miss:$v");$res=$env;break;case':?':if($env===null)throw new Exception("Miss:$v");$res=$env;break;default:$res=$env??'';}array_pop($vis);return(string)$res;};$v=preg_replace_callback('/\${?([A-Z0-9_]+)(:?[-?])?([^}]*)}?/i',$rc,$v);$p=self::V($v);$_ENV[$k]=$p;self::$cache[$k]=$p;}
private static function S($v){$l=strlen($v);$s=$d=false;for($i=0;$i<$l;$i++){ $c=$v[$i];if($c=="'"&&!$d)$s=!$s;elseif($c=='"'&&!$s)$d=!$d;elseif($c=='#'&&!$s&&!$d)return rtrim(substr($v,0,$i));}return$v;}
private function R($p,$s=1,$c=0){if($c&&isset(self::$fileLinesCache[$p]))return self::$fileLinesCache[$p];$f=@fopen($p,'rb');if(!$f)return false;if(!flock($f,LOCK_SH)){fclose($f);return false;}$r=[];while(($l=fgets($f))!==false){$l=rtrim($l,"\r\n");if($s&&trim($l)==='')continue;$r[]=$l;}flock($f,LOCK_UN);fclose($f);if($c)self::$fileLinesCache[$p]=$r;return$r;}
protected function F($f,?array$a=null){if(!is_file($f))throw new Exception("No:$f");$ls=$this->R($f,0);if($ls===false)throw new Exception("Read:$f");$raw=[];foreach($ls as$l){if($l===''||$l[0]=='#')continue;$x=explode('=',$l,2);if(count($x)<2)continue;$raw[trim($x[0])]=ltrim($x[1]??'');}foreach($ls as$l)$this->P($l,$a,$raw);return 1;}
private static function V($v){$l=strtolower($v);if(in_array($l,['true','yes','on']))return 1;if(in_array($l,['false','no','off']))return 0;if($l==='null'||$v==='')return null;if(is_numeric($v))return strpos($v,'.')!==false?(float)$v:(int)$v;return$v;}
static function env($k=null,$d=null){if($k===null)return$_ENV;if(isset(self::$cache[$k]))return self::V(self::$cache[$k]);if(isset($_ENV[$k]))return self::V($_ENV[$k]);if(func_num_args()>1){$v=self::V($d);$_ENV[$k]=self::$cache[$k]=$v;return$v;}return self::V($d);}
static function sysenv($k=null){static$c=[];if($k===null){if(!$c)$c=getenv()?:[];return$c;}if(isset($c[$k]))return$c[$k];$v=getenv($k);$c[$k]=$v===false?'':(string)$v;return$c[$k];}
static function setCache($k,$v){self::$cache[$k]=$v;}
}
